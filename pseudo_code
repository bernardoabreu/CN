Input: Populationsize, nodesfunc, nodesterm, Pcrossover, Pmutation, Preproduction, Palteration
Output: Sbest

Population ← InitializePopulation(Populationsize, 1 nodesfunc, nodesterm);
EvaluatePopulation(Population);
Sbest ← GetBestSolution(Population);

while ¬StopCondition() do
	Children ← ∅;
	while Size(Children) < Populationsize do
		Operator ← SelectGeneticOperator(Pcrossover, Pmutation, Preproduction, Palteration);
		if Operator ≡ CrossoverOperator then
			Parent1, Parent2 ← SelectParents(Population, Populationsize);
			Child1, Child2 ← Crossover(Parent1, Parent2);
			Children ← Child1;
			Children ← Child2;
		else if Operator ≡ MutationOperator then
			Parent1 ← SelectParents(Population, Populationsize);
			Child1 ← Mutate(Parent1);
			Children ← Child1;
		else if Operator ≡ ReproductionOperator then
			Parent1 ← SelectParents(Population, Populationsize);
			Child1 ← Reproduce(Parent1);
			Children ← Child1;
		else if Operator ≡ AlterationOperator then
			Parent1 ← SelectParents(Population, Populationsize);
			Child1 ← AlterArchitecture(Parent1);
			Children ← Child1;
		end
	end
	EvaluatePopulation(Children);
	Sbest ← GetBestSolution(Children, Sbest);
	Population ← Children;
end
return Sbest;